# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02-playlists.ipynb (unless otherwise specified).

__all__ = ['setup_client_scopes', 'get_album_art', 'get_album_data', 'get_track_data', 'get_playlist_track_metadata',
           'retrieve_playlist_df']

# Cell
import pandas as pd
import numpy as np

import FEAutils as hlp
import matplotlib.pyplot as plt
import seaborn as sns

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

import os
import requests

from .discography import retrieve_track_analysis, initialise_spotify_client

from ipypb import track

# Cell
def setup_client_scopes():
    client_id = os.getenv('SPOTIFY_ID')

    spotify_auth_url = 'https://accounts.spotify.com/authorize'
    scopes = ['user-read-private', 'user-modify-playback-state', 'user-read-currently-playing']

    query_params = {
        'client_id' : client_id,
        'response_type' : 'code',
        'redirect_uri' : 'http://osuked.com',
        'scope' : ' '.join(scopes)
    }

    r = requests.get(spotify_auth_url, params=query_params)

    return r

# Cell
def get_album_art(track):
    track_meta = dict()
    album_imgs = track['album']['images']

    if len(album_imgs) > 0:
        track_meta['album_art_url'] = album_imgs[0]['url']
        track_meta['album_art_height'] = album_imgs[0]['height']
        track_meta['album_art_width'] = album_imgs[0]['width']

    return track_meta

def get_album_data(track):
    track_meta = dict()

    track_meta['album_uri'] = track['album']['uri']
    track_meta['album_name'] = track['album']['name']
    track_meta['release_date'] = track['album']['release_date']

    return track_meta

def get_track_data(track):
    track_meta = dict()

    track_meta['artist_names'] = ', '.join([artist['name'] for artist in track['artists']])
    track_meta['artist_uris'] = ', '.join([artist['uri'] for artist in track['artists']])
    track_meta.update(track['external_ids'])

    track_meta['disc_number'] = track['disc_number']
    track_meta['duration_ms'] = track['duration_ms']
    track_meta['name'] = track['name']
    track_meta['track_uri'] = track['uri']
    track_meta['track_number'] = track['track_number']
    track_meta['popularity'] = track['popularity']

    return track_meta

def get_playlist_track_metadata(playlist_items):
    playlist_track_meta = []

    for playlist_entry in playlist_items['items']:
        track_meta = dict()

        track_meta['date_added_to_playlist'] = playlist_entry['added_at']
        track = playlist_entry['track']

        extractor_funcs = [get_album_art, get_album_data, get_track_data]

        for extractor_func in extractor_funcs:
            track_meta.update(extractor_func(track))

        playlist_track_meta += [track_meta]

    return playlist_track_meta

def retrieve_playlist_df(playlist_id='spotify:playlist:37i9dQZEVXcOwrS8NC07JJ', offset=0):
    sp = initialise_spotify_client()

    playlist_items = sp.playlist_items(playlist_id, offset=offset)
    playlist_track_meta = get_playlist_track_metadata(playlist_items)
    df_playlist = pd.DataFrame(playlist_track_meta)

    if len(playlist_items['items']) == playlist_items['limit']:
        offset += playlist_items['limit']
        df_playlist_remaining = retrieve_playlist_df(playlist_id, offset=offset)
        df_playlist = df_playlist.append(df_playlist_remaining).reset_index(drop=True)

    df_playlist = retrieve_track_analysis(df_playlist, track_uri_col='track_uri')

    return df_playlist